package com.example.aula01

import android.app.Activity
import android.content.Intent
import android.graphics.Bitmap
import android.os.Bundle
import android.provider.MediaStore
import android.speech.tts.TextToSpeech
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.text.TextRecognition
import com.google.mlkit.vision.text.latin.TextRecognizerOptions
import java.util.*

class MainActivity : AppCompatActivity(), TextToSpeech.OnInitListener {

    private val CAMERA_REQUEST_CODE = 1001

    private lateinit var captureImageButton: Button
    private lateinit var readTextButton: Button
    private lateinit var capturedImageView: ImageView
    private lateinit var extractedTextView: TextView

    private lateinit var textToSpeech: TextToSpeech

    private var extractedText: String = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        captureImageButton = findViewById(R.id.captureImageButton)
        readTextButton = findViewById(R.id.readTextButton)
        capturedImageView = findViewById(R.id.capturedImageView)
        extractedTextView = findViewById(R.id.extractedTextView)

        textToSpeech = TextToSpeech(this, this)

        // Botão capturar imagem
        captureImageButton.setOnClickListener {
            val cameraIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
            startActivityForResult(cameraIntent, CAMERA_REQUEST_CODE)
        }

        // Botão ler texto em voz
        readTextButton.setOnClickListener {
            if (extractedText.isNotEmpty()) {
                speakText(extractedText)
            } else {
                Toast.makeText(this, "Nenhum texto detectado para ler.", Toast.LENGTH_SHORT).show()
            }
        }
    }

    // Resultado da captura da imagem
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == CAMERA_REQUEST_CODE && resultCode == Activity.RESULT_OK) {
            val photo = data?.extras?.get("data") as Bitmap
            capturedImageView.setImageBitmap(photo)
            processImage(photo)
        }
    }

    // Processamento da imagem para OCR
    private fun processImage(bitmap: Bitmap) {
        val image = InputImage.fromBitmap(bitmap, 0)
        val recognizer = TextRecognition.getClient(TextRecognizerOptions.DEFAULT_OPTIONS)

        recognizer.process(image)
                .addOnSuccessListener { visionText ->
                    extractedText = visionText.text
                    extractedTextView.text = extractedText
                    speakText(extractedText)  // Leitura automática após captura
                }
                .addOnFailureListener { e ->
                    e.printStackTrace()
                    Toast.makeText(this, "Erro ao processar imagem.", Toast.LENGTH_SHORT).show()
                }
    }

    // Text-To-Speech (Leitura em voz)
    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            val result = textToSpeech.setLanguage(Locale("pt", "BR"))
            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                Toast.makeText(this, "Idioma não suportado!", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun speakText(text: String) {
        textToSpeech.speak(text, TextToSpeech.QUEUE_FLUSH, null, null)
    }

    override fun onDestroy() {
        if (textToSpeech.isSpeaking) {
            textToSpeech.stop()
        }
        textToSpeech.shutdown()
        super.onDestroy()
    }
}
